#include <linux/init.h>
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/sched/signal.h>
#include <linux/sched.h>
#include <linux/mm.h>

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Your Name");
MODULE_DESCRIPTION("Display memory usage information for user processes");

static int __init mem_info_init(void)
{
    struct task_struct *task;
    struct mm_struct *mm;
    unsigned long vsize, stack_start, code_size;
   
    printk(KERN_INFO "=== Memory Usage Information ===\n");
   
    
    for_each_process(task) {
        if (task->flags & PF_KTHREAD)
            continue;
       
        mm = task->mm;
        if (!mm)
            continue;
        vsize = mm->total_vm << (PAGE_SHIFT - 10); 
        stack_start = mm->start_stack;
        code_size = (mm->end_code - mm->start_code) >> 10; 
       
        
        if (code_size > 500) {
            printk(KERN_INFO "Name: %s | PID: %d | 虛擬記憶體: %lu KB | 使用者堆疊區位址: 0x%lx | 程式碼段大小: %lu KB[Memory-Heavy]\n",
                   task->comm, task->pid, vsize, stack_start, code_size);
        } else {
            printk(KERN_INFO "Name: %s | PID: %d | 虛擬記憶體: %lu KB | 使用者堆疊區位址: 0x%lx | 程式碼段大小: %lu KB\n",
                   task->comm, task->pid, vsize, stack_start, code_size);
        }
    }
   
    return 0;
}

static void __exit mem_info_exit(void)
{
    printk(KERN_INFO "Memory Info Module Unloaded\n");
}

module_init(mem_info_init);
module_exit(mem_info_exit);
